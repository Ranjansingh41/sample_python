language: python
python:
  - 2.6
  #- 2.7
  #- 3.2
  #- 3.3
  #- 3.4
  #- pypy

env:   
  secure: g2QDghMXChUfUuqHEC3wK4SDHnGkCgMKpm7EJ2SMNVDpuuAMjZ1L5w5Xy9QMnR0EhXI/66/5vwUz0JkjejxpOUau1fH0ZGBJLQXj2OW3enTwAimzGMM/i80bLA6GDnM8SuU4iaq90Y+OauYewUtG1+fG9+Dut8fkBwdGp240f2jKohmpP/qtWmrdbE5LhjIEvS22tzEyJhTs4bsBlA476881WE4GiiUYOrNRLvM9t6Qtg7X5JG57WIVa+nEayIsx8Rd/g9tdleR+ojFnU5l+ocnSRcCJBIyeTHMjo3du+trI3Bvn65Yr1cElzSiCDgcTmSlJqWFymuG2d3/NLXJx5g==
  
install:
  - pip install -r requirements.txt

# Make folders for the reports
before_script:
  - mkdir -p shippable/testresults
  - mkdir -p shippable/codecoverage
  #- cd fake/dir
  #- echo 'shouldnt get here'

script:
  - nosetests test.py --with-xunit --xunit-file=shippable/testresults/nosetests.xml
  - which python && coverage run --branch test.py
  - which python && coverage xml -o shippable/codecoverage/coverage.xml test.py
  

after_success: 
  - echo 'plain build succeeded, triggering other branches.'
  - betaorprod=$(echo "$BUILD_URL" | grep beta || echo "")
  - if [ -n "$betaorprod" ]; then echo 'BETA triggers'; fi
  - if [ -n "$betaorprod" ]; then 'curl https://apibeta.shippable.com'; fi
  - if [ -n "$betaorprod" ]; then 'curl -H "Authorization: apiToken $BETA_TOKEN" -H "Content-Type: application/json" -d "{\"projectId\":\"559b5acd2e2ab50e64b4eace\",\"branchName\":\"fail1\"}" https://apibeta.shippable.com/workflow/triggerBuild'; fi
  - if [ -n "$betaorprod" ]; then 'curl -H "Authorization: apiToken $BETA_TOKEN" -H "Content-Type: application/json" -d "{\"projectId\":\"559b5acd2e2ab50e64b4eace\",\"branchName\":\"fail2\"}" https://apibeta.shippable.com/workflow/triggerBuild'; fi
  - if [ -n "$betaorprod" ]; then 'curl -H "Authorization: apiToken $BETA_TOKEN" -H "Content-Type: application/json" -d "{\"projectId\":\"559b5acd2e2ab50e64b4eace\",\"branchName\":\"fail3\"}" https://apibeta.shippable.com/workflow/triggerBuild'; fi
  - if [ -n "$betaorprod" ]; then 'curl -H "Authorization: apiToken $BETA_TOKEN" -H "Content-Type: application/json" -d "{\"projectId\":\"559b5acd2e2ab50e64b4eace\",\"branchName\":\"fail4\"}" https://apibeta.shippable.com/workflow/triggerBuild'; fi
  - if [ -n "$betaorprod" ]; then 'curl -H "Authorization: apiToken $BETA_TOKEN" -H "Content-Type: application/json" -d "{\"projectId\":\"559b5acd2e2ab50e64b4eace\",\"branchName\":\"fail5\"}" https://apibeta.shippable.com/workflow/triggerBuild'; fi
  - if [ -n "$betaorprod" ]; then 'curl -H "Authorization: apiToken $BETA_TOKEN" -H "Content-Type: application/json" -d "{\"projectId\":\"559b5acd2e2ab50e64b4eace\",\"branchName\":\"fail6\"}" https://apibeta.shippable.com/workflow/triggerBuild'; fi
  - if [ -n "$betaorprod" ]; then 'curl -H "Authorization: apiToken $BETA_TOKEN" -H "Content-Type: application/json" -d "{\"projectId\":\"559b5acd2e2ab50e64b4eace\",\"branchName\":\"fail7\"}" https://apibeta.shippable.com/workflow/triggerBuild'; fi
  - if [ -n "$betaorprod" ]; then 'curl -H "Authorization: apiToken $BETA_TOKEN" -H "Content-Type: application/json" -d "{\"projectId\":\"559b5acd2e2ab50e64b4eace\",\"branchName\":\"fail8\"}" https://apibeta.shippable.com/workflow/triggerBuild'; fi
  - if [ -n "$betaorprod" ]; then 'curl -H "Authorization: apiToken $BETA_TOKEN" -H "Content-Type: application/json" -d "{\"projectId\":\"559b5acd2e2ab50e64b4eace\",\"branchName\":\"fail9\"}" https://apibeta.shippable.com/workflow/triggerBuild'; fi
  - if [ -n "$betaorprod" ]; then 'curl -H "Authorization: apiToken $BETA_TOKEN" -H "Content-Type: application/json" -d "{\"projectId\":\"559b5acd2e2ab50e64b4eace\",\"branchName\":\"pass1\"}" https://apibeta.shippable.com/workflow/triggerBuild'; fi

  - if [ -z "$betaorprod" ]; then echo 'PROD triggers'; fi
  - if [ -z "$betaorprod" ]; then curl https://api.shippable.com; fi

  
after_failure:
  - echo 'boo'
  #- cd /fake/dir
  #- echo 'shouldnt get here'
  
after_script:
  - echo 'do stuff'
  #- cd /fake/dir
  #- echo 'shouldnt get here'

notifications:
  email:
   - exampleone@org.com
